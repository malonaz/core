// Code generated by 'github.com/malonaz/core/tools/template'. DO NOT EDIT.
// This file is automatically generated from templates/main.go.tmpl
// To make changes, edit the template file and regenerate.
package main

var log = {{ goImport "github.com/malonaz/core/go/logging" }}.NewLogger()

var opts struct {
{{ template "mainOpts" . }}
}

func main() {
{{ goImport "math/rand" }}.Seed({{ goImport "time"}}.Now().UnixNano())
{{ goImport "github.com/malonaz/core/go/flags" }}.MustParse(&opts)
{{ goImport "github.com/malonaz/core/go/prometheus" }}.Serve(opts.Prometheus)
ctx := {{ goImport "context" }}.Background()

{{- /* GATHER SERVICE MANIFESTS */ -}}
{{- $serviceManifests := list -}}
{{- $serviceNameToServerNames := dict -}}
{{- range $server := .servers -}}
    {{- range $service := $server.services -}}
        {{- $serviceManifest := parseYaml $service.manifest -}}
        {{- $serviceManifests = append $serviceManifests $serviceManifest -}}
        {{- $existingServers := index $serviceNameToServerNames $serviceManifest.name | default (list) -}}
        {{- $updatedServers := append $existingServers $server.name -}}
        {{- $serviceNameToServerNames = set $serviceNameToServerNames $serviceManifest.name $updatedServers -}}

    {{- end -}}
{{- end -}}

{{- $serverNameToServiceNameToHealthCheckFunctions := dict -}}

{{- /* DEPENDENCIES GRPC CONNECTIONS*/ -}}
{{- range $serviceManifest := $serviceManifests -}}
    {{- range $dep := $serviceManifest.dependencies -}}
        {{- if eq $dep.type "grpc_client" -}}
            {{- if doOnce "grpc_conns_instantiations" -}}
                {{ "\n\n// Instantiate GRPC Connections (using one per identical endpoint)\n" -}}
                networkToGRPCConnection := map[string]*{{ goImport "github.com/malonaz/core/go/grpc" }}.Connection{}
            {{- end -}}

            {{- if doOnce (printf "grpc_conn_deps_%s" $dep.proto) -}}
                {{ $grpc := parseGRPC $dep.proto }}
                if _, ok := networkToGRPCConnection[opts.{{ $grpc.OptsFieldName }}.Endpoint()]; !ok {
                connection := {{ $grpc.NewConnection }}.Connect()
                defer connection.Close()
                networkToGRPCConnection[opts.{{ $grpc.OptsFieldName }}.Endpoint()] = connection
                }
            {{- end }}
        {{- end }}
    {{- end }}
{{- end }}

{{- /* DEPENDENCIES GRPC CLIENTS*/ -}}
{{- range $serviceManifest := $serviceManifests -}}
    {{- range $dep := $serviceManifest.dependencies -}}
        {{- if eq $dep.type "grpc_client" -}}
            {{- if doOnce "grpc_client_instantiations" -}}{{ "\n\n// Instantiate GRPC Clients" -}}{{- end -}}
            {{- if doOnce (printf "grpc_deps_%s" $dep.proto) -}}
                {{ $grpc := parseGRPC $dep.proto }}
                {{ $grpc.Connection }}, ok := networkToGRPCConnection[opts.{{ $grpc.OptsFieldName }}.Endpoint()]
                if !ok {
                log.Panicf("could not find grpc connection on for {{ $grpc.HumanName}}")
                }
                {{ $grpc.Client }} := {{ $grpc.NewClient }}
                {{ $grpc.HealthCheck }} := {{ $grpc.Connection }}.HealthCheckFn({{ $grpc.ServiceDescriptionName }})

                {{- /* Add health check function to all servers that use this service */ -}}
                {{- $serverNames := index $serviceNameToServerNames $serviceManifest.name -}}
                {{- range $serverName := $serverNames -}}
                    {{- $serverHealthChecks := index $serverNameToServiceNameToHealthCheckFunctions $serverName | default (dict) -}}
                    {{- $existingHealthChecks := index $serverHealthChecks $serviceManifest.name | default (list) -}}
                    {{- $updatedHealthChecks := append $existingHealthChecks $grpc.HealthCheck -}}
                    {{- $serverHealthChecks = set $serverHealthChecks $serviceManifest.name $updatedHealthChecks -}}
                    {{- $serverNameToServiceNameToHealthCheckFunctions = set $serverNameToServiceNameToHealthCheckFunctions $serverName $serverHealthChecks -}}
                {{- end -}}
            {{- end }}
        {{- end }}
    {{- end }}
{{- end }}

{{- /* DEPENDENCIES POSTGRES*/ -}}
{{- range $serviceManifest := $serviceManifests -}}
    {{- range $dep := $serviceManifest.dependencies -}}
        {{- if eq $dep.type "postgres" -}}
            {{- $dbKey := printf "postgres_db_%s" $dep.name -}}
            {{- if doOnce $dbKey }}
                {{- "\n" }}
                // Instantiate {{ $dep.name }} db client.
	              {{ $dep.name }}PsqlClient := {{ goImport "github.com/malonaz/core/go/postgres" }}.MustNewClient(opts.{{ $dep.name | title }}Postgres)
	              defer {{ $dep.name }}PsqlClient.Close()
                {{ $dep.name }}DBClient := {{ plzGoImport $dep.implementation }}.New({{ $dep.name }}PsqlClient)

                {{- /* Add health check function to all servers that use this service */ -}}
                {{- $serverNames := index $serviceNameToServerNames $serviceManifest.name -}}
                {{- range $serverName := $serverNames -}}
                    {{- $serverHealthChecks := index $serverNameToServiceNameToHealthCheckFunctions $serverName | default (dict) -}}
                    {{- $existingHealthChecks := index $serverHealthChecks $serviceManifest.name | default (list) -}}
                    {{- $updatedHealthChecks := append $existingHealthChecks (printf "%sPsqlClient.Ping" $dep.name) -}}
                    {{- $serverHealthChecks = set $serverHealthChecks $serviceManifest.name $updatedHealthChecks -}}
                    {{- $serverNameToServiceNameToHealthCheckFunctions = set $serverNameToServiceNameToHealthCheckFunctions $serverName $serverHealthChecks -}}
                {{- end -}}
            {{- end }}
        {{- end }}
    {{- end }}
{{- end }}

healthServer := {{ goImport "github.com/malonaz/core/go/health" }}.NewServer(opts.Health)
var gracefulStopFns []func()
var stopFns []func()

{{ range $server := .servers }}
    // Start {{ $server.name | camelcase }} Server
    {
    ctxSA, err := {{ goImport "github.com/malonaz/core/go/authentication" }}.WithServiceAccount(ctx, "{{ .serviceAccount }}")
    if err != nil {
    log.Panicf("injecting role into context: %v", err)
    }
    ctxSA = {{ goImport "github.com/malonaz/core/go/contexttag" }}.SetOntoContextNoop(ctxSA)

    {{- /* INSTANTIATE SERVICES*/ -}}
    {{- range $service := $server.services }}
        {{- $serviceManifest := parseYaml $service.manifest -}}
        {{- $serviceName := $serviceManifest.name | camelcase | untitle}}

        {{ "\n" }}// Instantiate {{ $serviceName }}.
        {{ $serviceName }}, err := {{ plzGoImport $serviceManifest.implementation }}.New(
        opts.{{ $serviceName | title }},
        {{- range $dep := $serviceManifest.dependencies }}
            {{- if eq $dep.type "grpc_client" }}
                {{ $grpc := parseGRPC $dep.proto -}}
                {{ $grpc.Client }},
            {{- else if eq $dep.type "postgres" }}
                {{ $dep.name }}DBClient,
            {{- end }}
        {{- end }}
        )
        if err != nil {
        log.Panicf("instantiating {{ $serviceName }}: %v", err)
        }
        // Start {{ $serviceName }} service.
        {{ $serviceName }}Cleanup, err := {{ $serviceName }}.Start(ctxSA)
        if err != nil {
        log.Panicf("starting {{ $serviceName }} service: %v", err)
        }
        defer {{ $serviceName }}Cleanup()
    {{- end }}

    {{- if eq $server.type "grpc" }}
        register := func(server *{{ goImport "github.com/malonaz/core/go/grpc"}}.Server) {
        {{- range $service := $server.services }}
            {{- $serviceManifest := parseYaml $service.manifest -}}
            {{- $serviceName := $serviceManifest.name | camelcase | untitle}}
            {{ $grpc := parseGRPC $service.proto -}}
            {{ $grpc.Register $serviceName }}
        {{- end }}
        }

        {{- range $interceptor := $server.interceptors -}}
            {{ if eq $interceptor.type "session_injector" }}
                sessionInjectorInterceptor := {{ goImport "github.com/malonaz/core/go/authentication" }}.NewSessionInjectorInterceptor()
            {{ else if eq $interceptor.type "internal_authentication" }}
                {{ $interceptor.type | camelcase | untitle }}Interceptor, err := {{ goImport "github.com/malonaz/core/go/authentication" }}.New{{ $interceptor.type | camelcase }}Interceptor(opts.{{ $interceptor.type | camelcase }})
                if err != nil {
                log.Panicf("instantiating {{ $interceptor.type | replace "_" " " }} interceptor: %v", err)
                }
            {{ else if eq $interceptor.type "external_api_key_authentication" }}
                {{ $interceptor.type | camelcase | untitle }}Interceptor, err := {{ goImport "github.com/malonaz/core/go/authentication" }}.New{{ $interceptor.type | camelcase }}Interceptor(opts.{{ $interceptor.type | camelcase }})
                if err != nil {
                log.Panicf("instantiating {{ $interceptor.type | replace "_" " " }} interceptor: %v", err)
                }
            {{ else }}
                {{ fail (printf "Unknown interceptor type: %s" $interceptor.type) }}
            {{ end }}
        {{- end }}

	      grpcServer := {{ goImport "github.com/malonaz/core/go/grpc"}}.NewServer(opts.{{ $server.name | camelcase }}GRPC, opts.Certs, opts.Prometheus, register).
        WithUnaryInterceptors({{- range $interceptor := $server.interceptors -}}
            {{- if eq $interceptor.type "session_injector" }}
                sessionInjectorInterceptor.Unary(),
            {{- else if eq $interceptor.type "internal_authentication" }}
                {{ $interceptor.type | camelcase | untitle }}Interceptor.Unary(),
            {{- else if eq $interceptor.type "external_api_key_authentication" }}
                {{ $interceptor.type | camelcase | untitle }}Interceptor.Unary(),
            {{ else }}
                {{ fail (printf "Unknown interceptor type: %s" $interceptor.type) }}
            {{- end -}}
        {{- end -}}).
        WithStreamInterceptors({{- range $interceptor := $server.interceptors -}}
            {{- if eq $interceptor.type "session_injector" }}
                sessionInjectorInterceptor.Stream(),
            {{- else if eq $interceptor.type "internal_authentication" }}
                {{ $interceptor.type | camelcase | untitle }}Interceptor.Stream(),
            {{- else if eq $interceptor.type "external_api_key_authentication" }}
                {{ $interceptor.type | camelcase | untitle }}Interceptor.Stream(),
            {{ else }}
                {{ fail (printf "Unknown interceptor type: %s" $interceptor.type) }}
            {{- end -}}
        {{- end -}})
        gracefulStopFns = append(gracefulStopFns, grpcServer.GracefulStop)
        stopFns = append(stopFns, grpcServer.Stop)
        // Register service health checks.
        // I need access to all the health check deps for a grpc service. (not for server).
        {{- range $service := $server.services }}
            {{- $serviceManifest := parseYaml $service.manifest -}}
            {{- $serviceName := $serviceManifest.name | camelcase | untitle}}
            {{ $grpc := parseGRPC $service.proto -}}
            {{- $serverHealthChecks := index $serverNameToServiceNameToHealthCheckFunctions $server.name -}}
            {{- $serviceHealthChecks := index $serverHealthChecks $serviceManifest.name | default (list) -}}
            grpcServer.RegisterServiceHealthChecks(
            {{- $grpc.ServiceDescriptionName -}},
            {{- range $healthCheckFn := $serviceHealthChecks -}}
                {{ $healthCheckFn }},
            {{- end -}}
            )
        {{- end }}
        healthServer.RegisterService("{{ $server.name }}", grpcServer.HealthCheckFn())
        go grpcServer.Serve(ctx)

        {{- $hasGateway := false -}}
        {{- range $service := $server.services -}}
            {{- if $service.gateway -}}
                {{- $grpc := parseGRPC $service.proto -}}
                {{- if doOnce $server.name }}
                    {{ $hasGateway = true }}
                    // GRPC gateway handlers.
                    var registerHandlers =[]{{ goImport "github.com/malonaz/core/go/grpc" }}.RegisterHandler{
                {{- end }}
                {{ $grpc.RegisterHandlerFromEndpoint }},
            {{ end }}
        {{ end }}
        {{- if $hasGateway -}}
            }
            grpcGatewayServer := grpc.NewGateway(opts.{{ $server.name | camelcase }}GRPCGateway, opts.{{ $server.name | camelcase }}GRPC, opts.Certs, opts.Prometheus, registerHandlers)
            go grpcGatewayServer.Serve(ctx)
        {{- end }}
    {{- end }}
    }
{{- end }}


// Setup health check.
go healthServer.Serve(ctx)

healthServer.MarkReady()
  handleSignals(gracefulStopFns, stopFns)
}

{{ template "shutdownOpts" . }}
