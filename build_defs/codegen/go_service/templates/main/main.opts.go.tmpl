{{- define "mainOpts" -}}
    {{- $core := "github.com/malonaz/core/go" -}}
	  // Core service options
	  Health         *{{ goImport (printf "%s/health" $core) }}.Opts            `group:"Health" namespace:"health" env-namespace:"HEALTH"`
	  Prometheus     *{{ goImport (printf "%s/prometheus" $core) }}.Opts        `group:"Prometheus" namespace:"prometheus" env-namespace:"PROMETHEUS"`
    Certs          *{{ goImport (printf "%s/certs" $core) }}.Opts           `group:"Certs" namespace:"certs" env-namespace:"CERTS"`

    {{- /* CHECK IF ANY GRPC SERVER REQUIRES AUTHENTICATION */ -}}
	  {{- range $server := .servers -}}
	      {{- if eq $server.type "grpc" -}}
	          {{- range $interceptor := $server.interceptors -}}
	              {{- if eq $interceptor.type "internal_authentication" -}}
                    {{- if doOnce $interceptor.type }}
                        {{ $interceptor.type | camelcase }} *{{ goImport (printf "%s/authentication" $core) }}.{{ $interceptor.type | camelcase }}InterceptorOpts `group:"{{ $interceptor.type | replace "_" " " | title }}" namespace:"{{ $interceptor.type | kebabcase }}" env-namespace:"{{ $interceptor.type | snakecase | upper }}"`
                    {{ end }}
                {{ end }}
	              {{- if eq $interceptor.type "external_api_key_authentication" -}}
                    {{- if doOnce $interceptor.type }}
                        {{ $interceptor.type | camelcase }} *{{ goImport (printf "%s/authentication" $core) }}.{{ $interceptor.type | camelcase }}InterceptorOpts `group:"{{ $interceptor.type | replace "_" " " | title }}" namespace:"{{ $interceptor.type | kebabcase }}" env-namespace:"{{ $interceptor.type | snakecase | upper }}"`
                    {{ end }}
                {{ end }}
	          {{- end -}}
	      {{- end -}}
	  {{- end }}

    {{- /* GATHER SERVICE MANIFESTS */ -}}
    {{- $serviceManifests := list -}}
    {{- range $server := .servers -}}
        {{- range $service := $server.services -}}
            {{- $serviceManifest := parseYaml $service.manifest -}}
            {{- $serviceManifests = append $serviceManifests $serviceManifest -}}
        {{- end -}}
    {{- end -}}

    {{- /* POSTGRES DATABASE OPTIONS */ -}}
    {{- range $serviceManifest := $serviceManifests -}}
        {{- range $dep := $serviceManifest.dependencies -}}
            {{- if eq $dep.type "postgres" -}}
                {{- if doOnce "post_client_opts" -}}{{"\n\n// Postgres client options"}}{{- end -}}
                {{- $dbKey := printf "postgres_db_opts_%s" $dep.name -}}
                {{- if doOnce $dbKey }}
                    {{ $dep.name | title }}Postgres *{{ goImport (printf "%s/postgres" $core) }}.Opts `group:"{{ $dep.name | title }} Postgres" namespace:"{{ $dep.name | kebabcase }}-postgres" env-namespace:"{{ $dep.name | snakecase | upper }}_POSTGRES"`
                {{- end }}
            {{- end }}
        {{- end }}
    {{- end }}

    {{- /* GRPC CLIENT OPTIONS */ -}}
	  {{- range $serviceManifest := $serviceManifests -}}
	      {{- if $serviceManifest.dependencies -}}
	          {{- range $dep := $serviceManifest.dependencies -}}
	              {{- if eq $dep.type "grpc_client" -}}
                    {{- if doOnce "grpc_client_opts" -}}{{"\n\n// gRPC client options"}}{{- end -}}
                    {{- if doOnce (printf "grpc_client_opts_%s" $dep.proto) -}}
                        {{ $grpc := parseGRPC $dep.proto }}
                        {{ $grpc.Opts }}
	                  {{- end }}
	              {{- end }}
	          {{- end }}
	      {{- end }}
	  {{- end }}

    {{- /* GRPC SERVER OPTIONS */ -}}
    {{- range $server := .servers -}}
        {{- if eq $server.type "grpc" -}}
            {{- if doOnce "grpc_server_option_comment" }}{{ "\n\n// gRPC server options" }}{{ end }}
            {{ $server.name | camelcase }}GRPC *{{ goImport (printf "%s/grpc" $core) }}.Opts `group:"{{ $server.name | camelcase }} GRPC (Server)" namespace:"{{ $server.name | kebabcase }}-grpc" env-namespace:"{{ $server.name | snakecase | upper }}_GRPC"`
            {{ $hasGrpcGateway := false }}
            {{ range $service := $server.services }}
                {{ if $service.gateway }} {{ $hasGrpcGateway = true }}{{ break }}{{ end }}
            {{ end }}
            {{ if $hasGrpcGateway }}
                {{ $server.name | camelcase }}GRPCGateway *{{ goImport (printf "%s/grpc" $core) }}.GatewayOpts `group:"{{ $server.name | camelcase }} GRPC Gateway" namespace:"{{ $server.name | kebabcase }}-grpc-gateway" env-namespace:"{{ $server.name | snakecase | upper }}_GRPC_GATEWAY"`
            {{ end }}
        {{- end -}}
    {{- end }}

    {{- /* SERVICE OPTIONS */ -}}
    {{- range $serviceManifest := $serviceManifests }}
        {{- if doOnce "service_opts" -}}{{"\n\n// Service options"}}{{- end -}}
        {{- $serviceKey := printf "service_opts_%s" $serviceManifest.name -}}
        {{- if doOnce $serviceKey }}
            {{- $serviceName := $serviceManifest.name | camelcase | title }}
            {{ $serviceName }} *{{ plzGoImport $serviceManifest.implementation ($serviceName | lower) }}.Opts `group:"{{ $serviceName }}" namespace:"{{ $serviceManifest.name | kebabcase }}" env-namespace:"{{ $serviceManifest.name | snakecase | upper }}"`
        {{- end }}
    {{- end }}

{{- end -}}
