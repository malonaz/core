package {{ .implementation | base}}

var log = {{ goImport "github.com/malonaz/core/go/logging" }}.NewLogger()

{{ if .includeRuntime }}
type Opts struct{}

type Runtime struct{}

func newRuntime(opts *Opts) (*Runtime, error) {
    return &Runtime{}, nil
}

func (s *Service) start(ctx {{ goImport "context" }}.Context) (func(), error) { return func() {}, nil }
{{ end }}

type Service struct {
	*Runtime
	opts *Opts
  ctxSA {{ goImport "context" }}.Context
        {{- range $dep := .dependencies }}
            {{- if eq $dep.type "grpc_client" }}
                {{ $grpc := parseGRPC $dep.proto }}
                {{ $grpc.Client }} {{ $grpc.ClientInterface }}
            {{- else if eq $dep.type "postgres" }}
                {{ $dep.name }}DBClient *{{ plzGoImport $dep.implementation }}.DB
            {{- end }}
        {{- end }}
}


// New instantiates and returns a new service.
func New(
	opts *Opts,
      {{- range $dep := .dependencies }}
            {{- if eq $dep.type "grpc_client" }}
                {{ $grpc := parseGRPC $dep.proto }}
                {{ $grpc.Client }} {{ $grpc.ClientInterface }},
            {{- else if eq $dep.type "postgres" }}
                {{ $dep.name }}DBClient *{{ plzGoImport $dep.implementation }}.DB,
            {{- end }}
        {{- end }}

) (*Service, error) {
	runtime, err := newRuntime(opts)
	if err != nil {
		return nil, {{ goImport "fmt" }}.Errorf("instantiating runtime: %w", err)
	}
	return &Service{
		Runtime: runtime,
		opts: opts,
      {{- range $dep := .dependencies }}
            {{- if eq $dep.type "grpc_client" }}
                {{ $grpc := parseGRPC $dep.proto }}
                {{ $grpc.Client }}: {{ $grpc.Client }},
            {{- else if eq $dep.type "postgres" }}
                {{ $dep.name }}DBClient: {{ $dep.name }}DBClient,
            {{- end }}
        {{- end }}
	}, nil
}

// Start this service. Returns clean up function.
func (s *Service) Start(ctxSA {{ goImport "context" }}.Context) (func(), error) {
  s.ctxSA = ctxSA
	return s.start(ctxSA)
}
