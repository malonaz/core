subinclude("//build_defs:template")
subinclude("//build_defs:docker")
subinclude("//build_defs:k8s")

def go_manifest(
        name:str,
        manifest:str="manifest.yaml",
        deps:list=[],
        visibility:list=[],
        schema:str="///core//build_defs/codegen/go_service/templates:service_manifest.schema",
):
    if len(deps) == 0:
        # If no deps, just use the original manifest
        templated_manifest = text_template(
            name = "manifest_templated.yaml",
            src = manifest,
        )
    else:
        # Build sed commands for each dep
        sed_commands = []
        for dep in deps:
            # Canonicalize the label - if no target specified, add the last path component as target
            canonical_dep = canonicalise(dep)
            sed_commands.append(f"sed -i 's|{dep}|{canonical_dep}($(location {dep}))|g' $OUT")

        cmd = "cp $SRC $OUT\n" + "\n".join(sed_commands)

        genrule(
            name = f"{name}_processed_manifest",
            srcs = [manifest],
            deps = deps,
            cmd = cmd,
            out = "processed_manifest.yaml",
        )

        templated_manifest = text_template(
            name = "manifest_templated.yaml",
            src = f":{name}_processed_manifest",
        )

    return validated_file(
        name = name,
        src=templated_manifest,
        schema = schema,
        format="yaml",
        exported_deps = deps,
        visibility=visibility,
    )

def go_service_src(
        name:str,
        manifest:str,
        templates:list=[],
        visibility:list=[],
):
    if len(templates) == 0:
        templates = ["///core//build_defs/codegen/go_service/templates:service.go.tmpl"]
    templates.append("///core//build_defs/codegen/go_service/templates:utils.go.tmpl")
    return go_template(
        name = name,
        templates = templates,
        data = manifest,
        format = "yaml",
        visibility = visibility,
    )


def go_main_src(
        name:str,
        manifest:str,
        templates:list=[],
        visibility:list=[],
):
    if len(templates) == 0:
        templates = [
            "///core//build_defs/codegen/go_service/templates:main.go.tmpl",
            "///core//build_defs/codegen/go_service/templates:main.opts.go.tmpl",
        ]
    templates.append("///core//build_defs/codegen/go_service/templates:utils.go.tmpl")

    return go_template(
        name = name,
        templates = templates,
        data = manifest,
        format = "yaml",
        visibility = visibility,
    )

def go_k8s(
        manifest:str,
        binary:str,
        resources:list=[],
        deps:list=[],
):
    ########################### DOCKER IMAGE ###########################
    docker_image = distroless_go(
        name = "docker_image",
        binary = binary,
        resources=resources,
    )

    ########################### K8S DEPLOYMENT ###########################
    k8s = go_template(
        name = "k8s_templated.yaml",
        templates = [
            "///core//build_defs/codegen/go_service/templates:k8s.yaml.tmpl",
            "///core//build_defs/codegen/go_service/templates:utils.go.tmpl",
        ],
        data = manifest,
        format = "yaml",
        deps = deps,
    )
    k8s_config(
        name = "k8s",
        srcs = [k8s],
        containers = [docker_image],
    )
