subinclude("//build_defs:template")
subinclude("//build_defs:docker")
subinclude("//build_defs:k8s")

def go_main_manifest(
        name:str,
        manifest:str="manifest.yaml",
        deps:list=[],
        visibility:list=[],
        schema:str="///core//build_defs/codegen/go_service/schemas:main.go.schema",
        ignore_schema:bool=False,
):
    return _go_manifest(
        name=name,
        manifest=manifest,
        deps=deps,
        visibility=visibility,
        schema=schema,
        ignore_schema=ignore_schema,
    )


def go_service_manifest(
        name:str,
        manifest:str="manifest.yaml",
        deps:list=[],
        visibility:list=[],
        schema:str="///core//build_defs/codegen/go_service/schemas:service.go.schema",
        ignore_schema:bool=False,
):
    return _go_manifest(
        name=name,
        manifest=manifest,
        deps=deps,
        visibility=visibility,
        schema=schema,
        ignore_schema=ignore_schema,
    )

def _go_manifest(
        name:str,
        manifest:str="manifest.yaml",
        deps:list=[],
        visibility:list=[],
        schema:str,
        ignore_schema:bool=False,
):
    if len(deps) == 0:
        # If no deps, just use the original manifest
        templated_manifest = text_template(
            name = "manifest_templated.yaml",
            src = manifest,
        )
    else:
        # Build awk commands using variables (safer than inline strings)
        awk_commands = ["cp $SRC $OUT"]
        for i, dep in enumerate(deps):
            canonical_dep = canonicalise(dep)
            replacement = f"{canonical_dep}($(location {dep}))"

            # Use awk with -v to pass variables (avoids shell escaping issues)
            awk_commands.append(f'awk -v old="{dep}" -v new="{replacement}" \'{{ gsub(old, new); print }}\' $OUT > $OUT.tmp && mv $OUT.tmp $OUT')

        cmd = "\n".join(awk_commands)

        genrule(
            name = f"{name}_processed_manifest",
            srcs = [manifest],
            deps = deps,
            cmd = cmd,
            out = "processed_manifest.yaml",
        )

        templated_manifest = text_template(
            name = "manifest_templated.yaml",
            src = f":{name}_processed_manifest",
        )

    # Skip validation if ignore_schema is True
    if ignore_schema:
        return filegroup(
            name = name,
            srcs = [templated_manifest],
            exported_deps = deps,
            visibility = visibility,
        )
    else:
        return validated_file(
            name = name,
            src = templated_manifest,
            schema = schema,
            format = "yaml",
            exported_deps = deps,
            visibility = visibility,
        )

def go_service_src(
        name:str,
        manifest:str,
        templates:list=[],
        visibility:list=[],
):
    if len(templates) == 0:
        templates = ["///core//build_defs/codegen/go_service/templates:service.go.tmpl"]
    templates.append("///core//build_defs/codegen/go_service/templates:utils.go.tmpl")
    return go_template(
        name = name,
        templates = templates,
        data = manifest,
        format = "yaml",
        visibility = visibility,
    )


def go_main_src(
        name:str,
        manifest:str,
        templates:list=[],
        visibility:list=[],
):
    if len(templates) == 0:
        templates = [
            "///core//build_defs/codegen/go_service/templates/main:main.go.tmpl",
            "///core//build_defs/codegen/go_service/templates/main:main.opts.go.tmpl",
            "///core//build_defs/codegen/go_service/templates/main:main.shutdown.go.tmpl",
        ]
    templates.append("///core//build_defs/codegen/go_service/templates:utils.go.tmpl")

    return go_template(
        name = name,
        templates = templates,
        data = manifest,
        format = "yaml",
        visibility = visibility,
    )

def go_k8s(
        manifest:str,
        binary:str,
        resources:list=[],
        deps:list=[],
):
    ########################### DOCKER IMAGE ###########################
    docker_image = distroless_go(
        name = "docker_image",
        binary = binary,
        resources=resources,
    )

    ########################### K8S DEPLOYMENT ###########################
    k8s = go_template(
        name = "k8s_templated.yaml",
        templates = [
            "///core//build_defs/codegen/go_service/templates:k8s.yaml.tmpl",
            "///core//build_defs/codegen/go_service/templates:utils.go.tmpl",
        ],
        data = manifest,
        format = "yaml",
        deps = deps,
    )
    k8s_config(
        name = "k8s",
        srcs = [k8s],
        containers = [docker_image],
    )
