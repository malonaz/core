{{- /* ################### TOPLINE VARIABLES ################### */ -}}
{{ $file := .File }}
{{ $generatedFile := .GeneratedFile }}
{{- $apiImportPathRaw := $file.GoImportPath | toString | clean | dir -}}
{{- $apiImportPath := printf "%s/%s" (trimPrefix "\"" $apiImportPathRaw) "api" -}}
{{- $dummy := replaceImportPath $file.GoImportPath $apiImportPath -}}
{{ $modelImportPath := printf "%s/model" ($apiImportPath | dir | dir | dir) }}

// Code generated by protoc-templates. DO NOT EDIT.
// source: {{ $file.GoImportPath }}
package service

import (
pb "{{ $apiImportPath }}"
)

// Prevent compiling from acting up.
type _ pb.{{ (index $file.Messages 0).GoIdent.GoName }}

{{- range $service := $file.Services }}
    {{- range $method := $service.Methods }}
        {{- $createOpts := getExt $method.Desc "malonaz.core.codegen.rpc.v1.create" -}}
        {{- $updateOpts := getExt $method.Desc "malonaz.core.codegen.rpc.v1.update" -}}
        {{- $deleteOpts := getExt $method.Desc "malonaz.core.codegen.rpc.v1.delete" -}}
        {{- $getOpts := getExt $method.Desc "malonaz.core.codegen.rpc.v1.get" -}}
        {{- $listOpts := getExt $method.Desc "malonaz.core.codegen.rpc.v1.list" -}}

        {{/* Validate that only one Opts is defined */}}
        {{- $optsCount := 0 -}}
        {{- if not (emptyPb $createOpts) }}{{- $optsCount = add $optsCount 1 -}}{{- end -}}
        {{- if not (emptyPb $updateOpts) }}{{- $optsCount = add $optsCount 1 -}}{{- end -}}
        {{- if not (emptyPb $deleteOpts) }}{{- $optsCount = add $optsCount 1 -}}{{- end -}}
        {{- if not (emptyPb $getOpts) }}{{- $optsCount = add $optsCount 1 -}}{{- end -}}
        {{- if not (emptyPb $listOpts) }}{{- $optsCount = add $optsCount 1 -}}{{- end -}}
        {{- if gt $optsCount 1 }}
            {{- fail (printf "Method %s has multiple operation types defined" $method.GoName) -}}
        {{- end -}}

        {{/* CREATE ENDPOINT */}}
        {{- if $createOpts.Generate }}
            {{- $_ := fqn $modelImportPath "" -}}
            {{- $resource := $method.Output }}
            {{- $resourceGoName := $resource.GoIdent.GoName }}
            {{- if $createOpts.UuidNamespace }}
                {{ if not ($method.Input.Desc.Fields.ByName "request_id") -}}{{ fail "request_id field is not defined" }}{{ end }}
                var uuidNamespace{{ $resourceGoName }} = {{ fqn "github.com/malonaz/core/go/uuid" "MustParse" }}("{{ $createOpts.UuidNamespace }}")
            {{- end }}
            // {{ printf "Create%s creates a %s" $resourceGoName $resourceGoName }}
            func (s *Service) {{ $method.GoName }}(ctx {{ fqn "context" "Context" }}, request *pb.{{ $method.Input.GoIdent.GoName }}) (*{{ qualifiedGoIdent $method.Output.GoIdent }}, error) {
            {{- if $createOpts.UuidNamespace }}
                // Set the id.
                request.{{ $resourceGoName }}.Id = {{ fqn "github.com/malonaz/core/go/uuid" "NewV5" }}(uuidNamespace{{ $resourceGoName }}, request.RequestId).String()
            {{- end }}

            {{/* Name space by user if necessary */}}
            {{- $userIDField := "user_id" -}}

            {{ if $createOpts.PreFn -}}
                // PRE FN.
                if err := s.pre{{ $method.GoName }}(ctx, request); err != nil {
                return nil, err
                }
            {{ end }}

            // STEP 1: Set some input fields.
            {{ if $resource.Desc.Fields.ByName "create_timestamp" -}}
                request.{{ $resourceGoName }}.CreateTimestamp = {{ fqn "time" "Now" }}().UnixMicro()
            {{ end -}}
            {{ if $resource.Desc.Fields.ByName "update_timestamp" -}}
                request.{{ $resourceGoName }}.UpdateTimestamp = request.{{ $resourceGoName }}.CreateTimestamp
            {{ end -}}

            {{ "\n" }}
            // STEP 2: Convert the resource to the database representation.
            {{ $resourceGoName | untitle }}, err := model.{{ $resourceGoName }}FromPb(request.{{ $resourceGoName }})
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "converting {{ $resourceGoName | untitle }}: %v", err)
	          }

            // STEP 3: Insert the resource idempotently.
            ok, err := s.{{ $resourceGoName | untitle }}DBClient.Insert{{ $resourceGoName }}(ctx, {{ $resourceGoName | untitle }})
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "inserting {{ $resourceGoName | snakecase }}: %v", err)
	          }
	          if !ok {
		        get{{ $resourceGoName }}Request := &pb.Get{{ $resourceGoName }}Request{
            {{ $resourceGoName }}Id: request.{{ $resourceGoName }}.Id,
		        }
            return s.Get{{ $resourceGoName }}(ctx, get{{ $resourceGoName }}Request)
	          }
            return {{ if  $createOpts.PostFn }} s.post{{ $method.GoName }}(ctx, request){{ else }}request.{{ $resourceGoName }}, nil{{ end }}
            }
        {{ end -}}

        {{/* UPDATE ENDPOINT */}}
        {{- if $updateOpts.Generate }}
            {{- $_ := fqn $modelImportPath "" -}}
            {{- $resource := $method.Output }}
            {{- $resourceGoName := $resource.GoIdent.GoName }}

            {{/* Find the Get method to extract view field */}}
            {{- $getMethod := false -}}
            {{- range $m := $service.Methods -}}
                {{- if eq $m.GoName (printf "Get%s" $resourceGoName) -}}
                    {{- $getMethod = $m -}}
                {{- end -}}
            {{- end -}}
            {{ $updateView := false }}
            {{- if $getMethod -}}
                {{- $viewFd := $getMethod.Input.Desc.Fields.ByName "view" -}}
                {{- if $viewFd }}
                    {{- $enumValues := $viewFd.Enum.Values -}}
                    {{- range $i := untilStep 1 $enumValues.Len 1 }}
                        {{- $enumValueFd :=  $enumValues.Get $i -}}
                        {{- $viewOpts :=  getExt $enumValueFd "malonaz.core.codegen.rpc.v1.view" }}
                        {{- if $viewOpts.UpdateView -}}
                            {{- if $updateView -}}{{- fail "duplicate update view" -}}{{- end -}}
                            {{- $updateView = $enumValueFd -}}
                        {{- end -}}
                    {{ end -}}
                    {{- if not $updateView -}}{{- fail "no update view defined" -}}{{- end -}}
                {{- end }}
            {{- end -}}

            var update{{ $resourceGoName }}RequestParser = {{ fqn "github.com/malonaz/core/go/aip" "NewUpdateRequestParser" }}(&pb.Update{{ $resourceGoName }}Request{})

            {{/* Wrapping function for error checks. */}}
            func (s *Service) {{ $method.GoName }}(ctx {{ fqn "context" "Context" }}, request *pb.{{ $method.Input.GoIdent.GoName }}) (*{{ qualifiedGoIdent $method.Output.GoIdent }}, error) {
                return s.{{ $method.GoName | untitle }}(ctx, request)
            }

            func (s *Service) {{ $method.GoName | untitle }}(ctx {{ fqn "context" "Context" }}, request *pb.{{ $method.Input.GoIdent.GoName }}) (*{{ qualifiedGoIdent $method.Output.GoIdent }}, error) {
            {{ if $updateOpts.PreFn -}}
                // PRE FN.
                if err := s.pre{{ $method.GoName }}(ctx, request); err != nil {
                return nil, err
                }
            {{ end }}

            // STEP 1: Parse request.
	          parsedRequest, err := update{{ $resourceGoName }}RequestParser.Parse(request.FieldMask, request.{{ $resourceGoName }})
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "InvalidArgument" }}, "parsing request: %v", err)
	          }

            // STEP 2: Retrieve existing resource.
            get{{ $resourceGoName }}Request := &pb.Get{{ $resourceGoName }}Request{
            {{ $resourceGoName }}Id: request.{{ $resourceGoName }}.Id,
            {{- if $updateView }}
                View: pb.{{ $updateView.Parent.Name | toString }}_{{ $updateView.Name }},
            {{- end }}
            }
            existing{{ $resourceGoName }}, err := s.Get{{ $resourceGoName }}(ctx, get{{ $resourceGoName }}Request)
            if err != nil {
            return nil, err
            }
            updated{{ $resourceGoName }} := {{ fqn "google.golang.org/protobuf/proto" "Clone" }}(existing{{ $resourceGoName }}).(*{{ qualifiedGoIdent $method.Output.GoIdent }})

            // STEP 3: Patch the existing resource.
            {{ if $resource.Desc.Fields.ByName "update_timestamp" -}}
	              updated{{ $resourceGoName }}.UpdateTimestamp = {{ fqn "time" "Now" }}().UnixMicro()
            {{ end }}
	          if err := parsedRequest.ApplyFieldMask(updated{{ $resourceGoName }}, request.{{ $resourceGoName }}); err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "InvalidArgument" }}, "applying field mask: %v", err)
	          }

            // STEP 4: Insert patched resource.
	          {{ $resourceGoName | untitle }}, err := model.{{ $resourceGoName }}FromPb(updated{{ $resourceGoName }})
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "converting pb.{{ $resourceGoName }} to model.{{ $resourceGoName }}: %v", err)
	          }
	          ok, err := s.{{ $resourceGoName | untitle }}DBClient.Update{{ $resourceGoName }}(ctx, {{ $resourceGoName | untitle }}, parsedRequest.GetSQLUpsertClause())
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "inserting {{ $resourceGoName | untitle }}: %v", err)
	          }
	          if !ok {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "NotFound" }}, "{{ $resourceGoName | untitle }} does not exist")
	          }

            {{ if  $updateOpts.PostFn }}
                if err := s.post{{ $method.GoName }}(ctx, request, existing{{ $resourceGoName }}, updated{{ $resourceGoName }}); err != nil {
                return nil, err
                }
            {{ end }}
            return updated{{ $resourceGoName }}, nil
            }
        {{ end -}}

        {{/* GET ENDPOINT */}}
        {{- if $deleteOpts.Generate }}
            {{- $resourceGoName := $method.GoName | trimPrefix "Delete" -}}
            {{- $resource := false -}}
            {{- range $method := $service.Methods }}
                {{ range $field := $method.Output.Fields }}
                    {{ if eq $field.GoName (printf "%ss" $resourceGoName) }}
                        {{ $resource = $field.Message }}
                    {{ end }}
                {{ end  }}
            {{ end }}
            {{ if not $resource }}{{ fail "could not find go resource by inspecting methods" }}{{ end }}
            {{- $modelOpts := getExt $resource.Desc "malonaz.core.codegen.model.v1.model_opts" -}}

            func (s *Service) {{ $method.GoName }}(ctx {{ fqn "context" "Context" }}, request *pb.{{ $method.Input.GoIdent.GoName }}) (*{{ fqn "google.golang.org/protobuf/types/known/emptypb" "Empty" }}, error) {
            get{{ $resourceGoName }}Request := &pb.Get{{ $resourceGoName }}Request {
            {{ $resourceGoName }}Id: request.{{ $resourceGoName }}Id,
            }
            // This ensure that the resource exists *and* that caller has permissions over it.
            {{ $resourceGoName | untitle }}, err := s.Get{{ $resourceGoName }}(ctx, get{{ $resourceGoName }}Request)
            if err != nil {
            return nil, err
            }
            _ = {{ $resourceGoName | untitle }} // To avoid having complicated logic.
            {{ if $deleteOpts.PreFn }}
                if err := s.preDelete{{ $resourceGoName }}(ctx, {{ $resourceGoName | untitle }}); err != nil {
                return nil, err
                }
            {{ end }}

            {{ if $modelOpts.SoftDeletable }}
                if request.HardDelete {
                if err := s.{{ $resourceGoName | untitle }}DBClient.Delete{{ $resourceGoName }}(ctx, request.{{ $resourceGoName }}Id); err != nil {
                return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "hard deleting: %v", err)
                }
                } else {
                // Soft delete by updating delete_timestamp
                {{ $resourceGoName | untitle }}.DeleteTimestamp = {{ fqn "time" "Now" }}().UnixMicro()
                updateRequest := &pb.Update{{ $resourceGoName }}Request{
                {{ $resourceGoName }}: {{ $resourceGoName | untitle }},
                FieldMask: &{{ fqn "google.golang.org/protobuf/types/known/fieldmaskpb" "FieldMask" }}{
                Paths: []string{"delete_timestamp"},
                },
                }

                {{ $resourceGoName | untitle }}, err = s.Update{{ $resourceGoName }}(ctx, updateRequest)
                if err != nil {
                return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "soft deleting: %v", err)
                }
                }
            {{ else }}
                if err := s.{{ $resourceGoName | untitle }}DBClient.Delete{{ $resourceGoName }}(ctx, request.{{ $resourceGoName }}Id); err != nil {
                return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "deleting: %v", err)
                }
            {{ end }}

	          return &emptypb.Empty{}, nil
            }
        {{ end -}}

        {{/* GET ENDPOINT */}}
        {{- if $getOpts.Generate }}
            {{ $getFieldName :=  "id" }}
            {{- $resource := $method.Output }}
            {{- $resourceGoName := $resource.GoIdent.GoName }}
            {{ $descFields := $resource.Desc.Fields }}
            {{ $getField := $descFields.ByName ( $getFieldName | protoreflectName) }}
            {{ $isStringField := eq ($getField.Kind | toString) "string" }}

            {{- $viewFd := $method.Input.Desc.Fields.ByName "view" -}}

            // {{ printf "Get%s retrieves a single %s" $resourceGoName $resourceGoName }}
            func (s *Service) Get{{ $resourceGoName }}(ctx {{ fqn "context" "Context" }}, request *pb.Get{{ $resourceGoName }}Request) (*{{ qualifiedGoIdent $method.Output.GoIdent }}, error) {
            list{{ $resourceGoName }}sRequest := &pb.List{{ $resourceGoName }}sRequest{
            Filter: {{ fqn "fmt" "Sprintf" }}(`{{ $getFieldName }}={{ ternary "\"%s\""  "%d" $isStringField}}`, request.{{ $resourceGoName }}{{ $getFieldName | camelcase | title }}),
            {{ if $viewFd }}View: request.View,{{ end }}
            }
            list{{ $resourceGoName }}sResponse, err := s.List{{ $resourceGoName }}s(ctx, list{{ $resourceGoName }}sRequest)
            if err != nil {
            return nil, err
            }
            if len(list{{ $resourceGoName }}sResponse.{{ $resourceGoName }}s) != 1 {
            return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "NotFound" }}, "could not find {{ $resourceGoName }}")
            }
            return list{{ $resourceGoName }}sResponse.{{ $resourceGoName }}s[0], nil
            }
        {{ end -}}


        {{/* LIST ENDPOINT */}}
        {{- if $listOpts.Generate }}
            {{- $resourceGoName := $method.GoName | trimPrefix "List" | trimSuffix "s" -}}
            {{- $resourceDbName := printf "db%s" $resourceGoName }}
            {{ $resource := false }}
            {{ range $field := $method.Output.Fields }}
                {{ if eq $field.GoName (printf "%ss" $resourceGoName) }}
                    {{ $resource = $field.Message }}
                {{ end }}
            {{ end  }}
            {{ if not $resource }}{{ fail "could not find go resource by inspecting response" }}{{ end }}

            {{- $viewFd := $method.Input.Desc.Fields.ByName "view" -}}
            {{- if $viewFd }}
                var (
                {{- $enumValues := $viewFd.Enum.Values -}}
                {{- range $i := untilStep 1 $enumValues.Len 1 }}
                    {{- $enumValueFd :=  $enumValues.Get $i -}}
                    {{- $viewOpts :=  getExt $enumValueFd "malonaz.core.codegen.rpc.v1.view" }}
                    {{ $enumValueFd.Name | toString | camelcase | untitle }} = {{ fqn "github.com/malonaz/core/go/postgres" "GetDBColumns" }}(model.{{ $resource.GoIdent.GoName }}{}, {{ range $viewOpts.Exclude }}"{{ . }}",{{ end }})
                {{ end -}}
                )
            {{- end }}


            var {{ $method.Input.GoIdent.GoName | untitle }}Parser = {{ fqn "github.com/malonaz/core/go/aip" "NewListRequestParser" }}(&pb.{{ $method.Input.GoIdent.GoName }}{})

            func (s *Service) {{ $method.GoName }}(ctx {{ fqn "context" "Context" }}, request *pb.{{ $method.Input.GoIdent.GoName }}) (*{{ qualifiedGoIdent $method.Output.GoIdent }}, error) {
            {{ if $listOpts.PreFn -}}
                // PRE FN.
                if err := s.pre{{ $method.GoName }}(ctx, request); err != nil {
                return nil, err
                }
            {{ end }}

            {{- if $viewFd }}
                if request.View == pb.{{ $viewFd.Enum.Name | toString }}_{{ $viewFd.Enum.Name | toString | snakecase | upper }}_UNSPECIFIED {
                request.View = pb.{{ $viewFd.Enum.Name | toString }}_{{ $viewFd.Enum.Name | toString | snakecase | upper }}_BASIC

                }
            {{ end }}

            {{- $userIDField :=  "user_id" -}}

	          parsed, err := {{ $method.Input.GoIdent.GoName | untitle }}Parser.ParseRequest(request)
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "InvalidArgument" }}, err.Error())
	          }
	          whereClause, whereParams := parsed.GetSQLWhereClause()
            var dbColumns []string
            {{- if $viewFd }}
                switch request.View {
                {{- $enumValues := $viewFd.Enum.Values -}}
                {{- range $i := untilStep 1 $enumValues.Len 1 }}
                    {{- $enumValueFd :=  $enumValues.Get $i -}}
                    {{- $viewOpts :=  getExt $enumValueFd "malonaz.core.codegen.rpc.v1.view" }}
                    case pb.{{ $viewFd.Enum.Name | toString }}_{{ $enumValueFd.Name | toString | snakecase | upper }}:
                    dbColumns = {{ $enumValueFd.Name | toString | camelcase | untitle }}
                {{ end -}}
                default:
		            return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "InvalidArgument" }}, "unknown view %s", request.View)
                }
            {{- end }}


	          {{ $resourceDbName }}s, err := s.{{ $resourceGoName | untitle }}DBClient.{{ $method.GoName }}(ctx, whereClause, parsed.GetSQLOrderByClause(), parsed.GetSQLPaginationClause(), dbColumns, whereParams...)
	          if err != nil {
		        return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "listing {{ $resourceGoName | snakecase }}: %v", err)
	          }
	          nextPageToken := parsed.GetNextPageToken(len({{ $resourceDbName }}s))
	          if nextPageToken != "" {
		        {{ $resourceDbName }}s = {{ $resourceDbName }}s[:len({{ $resourceDbName }}s)-1]
	          }

            {{ $resourceGoName | untitle }}s := make([]*{{ qualifiedGoIdent $resource.GoIdent }}, 0, len({{ $resourceDbName }}s))
	          for _, {{ $resourceDbName }} := range {{ $resourceDbName }}s {
		        {{ $resourceGoName | untitle }}, err := {{ $resourceDbName }}.ToPb()
		        if err != nil {
			      return nil, {{ fqn "google.golang.org/grpc/status" "Errorf" }}({{ fqn "google.golang.org/grpc/codes" "Internal" }}, "converting model.{{ $resourceGoName }} to pb.{{ $resourceGoName }}: %v", err)
		        }
		        {{ $resourceGoName | untitle }}s = append({{ $resourceGoName | untitle }}s, {{ $resourceGoName | untitle }})
	          }

            {{ if  $listOpts.PostFn }}
                if err := s.post{{ $method.GoName }}(ctx, {{ $resourceGoName | untitle }}s); err != nil {
                return nil, err
                }
            {{ end }}
            return &pb.{{ $method.Output.GoIdent.GoName }}{
            {{ $resourceGoName }}s: {{ $resourceGoName | untitle}}s,
            NextPageToken: nextPageToken,
            }, nil
            }
        {{ end -}}

    {{ end }}
{{- end }}
